lua_package_path '/etc/nginx/lua/?.lua;;';

lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
lua_ssl_verify_depth 5;

lua_shared_dict discovery 1m;
lua_shared_dict jwks 1m;

# API
server {
  listen 80;
  server_name api.$HOST_NAME;
  return 301 https://$server_name$request_uri;
}

server {
  listen 443 ssl;
  server_name api.$HOST_NAME;

  ssl_certificate /var/cert/fullchain.pem;
  ssl_certificate_key /var/cert/privkey.pem;

  charset utf-8;

  access_log /var/log/nginx/api.access.log;
  error_log /var/log/nginx/api.error.log;

  location /favicon.ico {
    return 404;
  }

  if ($request_method = 'OPTIONS') {
    rewrite .* /options last;
  }

  if ($http_origin ~ '^https://(localhost|.+\.$HOST_NAME_REGEX)') {
    set $cors_origin $http_origin;
    set $cors_credentials 'true';
  }

  add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
  add_header 'Access-Control-Allow-Credentials' "$cors_credentials" always;

  include /etc/nginx/conf.d/include/api/public/*.conf;

  location /options {
    internal;

    if ($http_origin ~ '^https://(localhost|.+\.$HOST_NAME_REGEX)') {
      set $cors_origin $http_origin;
      set $cors_credentials 'true';
    }

    add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
    add_header 'Access-Control-Allow-Credentials' "$cors_credentials" always;
    add_header 'Access-Control-Allow-Methods' "$http_access_control_request_method" always;

    return 200;
  }

  location /login {
    resolver 8.8.8.8 8.8.4.4 ipv6=off;

    access_by_lua_block {
      require("auther").login()
    }
  }

  location / {
    resolver 8.8.8.8 8.8.4.4 ipv6=off;

    access_by_lua_block {
      require("auther").guard()
    }
  }

  location /internal {
    internal;

    include /etc/nginx/conf.d/include/api/internal/*.conf;

    location ~ ^/internal/login/(.+)$ {
      rewrite ^/internal/login/(.+)$ /internal/$1 last;
    }

    location /internal/login {
      if ($arg_redirect ~ .+) {
        return 302 $arg_redirect;
      }

      default_type text/html;
      return 200 '<html><body>Logged In</body></html>';
    }
  }
}
